#!/usr/bin/php
<?php
// load the composer autoloader
// backtrack from /vendor/dotco/rebuilder/bin/rebuilder to /vendor/
require_once(__DIR__ . '/../../../autoload.php');

// check for params
$options = getopt('c:e::m:t:', array('config:', 'env::', 'modules:', 'type:'));

// TODO: add help section
// ...

// check on configuration file to load
if (!empty($options['config']) || !empty($options['c'])) {
    // attempt to load the file
    $file = !empty($options['config']) ? $options['config'] : $options['c'];
    if (!file_exists($file)) {
        throw new Exception('Config file does not exist: ' . $file);
    }

    $config = include_once($file);

    // check on whether we need to load a specific environmental within the config
    $environment = !empty($options['env'])
        ? $options['env'] : (!empty($options['e'])
            ? $options['e']
            : FALSE);
    define('ENVIRONMENT', $environment);

    // set config to environment
    if (ENVIRONMENT && isset($config[ENVIRONMENT])) {
        $config = $config[ENVIRONMENT];
    }
}

// check for the bundle(s)
if (!empty($options['modules']) || !empty($options['m'])) {

    // the modules we end up merging
    $modules = array();

    // retrieve action and see if we have multiple
    $mods = !empty($options['modules']) ? $options['modules'] : $options['m'];
    $mods = explode(',', $mods);
    $mods = array_map('trim', $mods);

    // check for type
    $type = !empty($options['type'])
        ? $options['type']
        : (!empty($options['t'])
            ? $options['t']
            : NULL);

    if (!empty($type)) {
        $type = explode(',', $type);
        $type = array_map('trim', $type);
    }

    // iterate over all actions to add to module
    foreach ($mods as $m) {
        // get copy of config
        $modConfig = array($m => isset($config[$m]) ? $config[$m] : array());
        if (empty($modConfig)) {
            die('No configuration settings found for module ' . $m . '. Did you specify an environment?');
        }

        // merge with type, if applicable
        if (!empty($type)) {
            if (isset($modConfig['config'])) {
                $modConfig['config']['type'] = $type;
            } else {
                $modConfig['config'] = array(
                    'type' => $type
                );
            }
        }

        // check for module action config options from file
        $modules = array_merge($modules, $modConfig);
    }

    // check if the config file has customPaths for the autoloader
    $customPaths = isset($config['customPaths']) ? $config['customPaths'] : array();

    // check if we actually have modules to run
    if (!empty($modules)) {
        echo 'Beginning the process of running the following modules in order:' . PHP_EOL;
        echo '  - ' . implode("\n  - ", array_keys($modules)) . PHP_EOL;

        $rebuilder = new \Rebuilder\Core($modules, $customPaths);
        $rebuilder->run();
    } else {
        throw new Exception('No modules set to run.');
    }

}

die('Rebuilder CLI has completed.');
